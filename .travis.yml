env:
    global:
        - secure: "eUzEFbxRZTvajHMRXfhMfsgJZKwoN0X+TjckiYtMDdMwjR0cFwg/qnmnxEmxx68+FhVh8R3OSPy2xFLC5DmjgKUSDk3xK9CNfpXPB57Xv4d0YzbbAqsKkVwBIIXQOPVljQnfavcjB5NkSsqe/99Q+mj4sGbUi0nEbb6eO6gpNyj2ke6uyvWMd2GyS08zeqek9ofInpGd4sQZMj7O3DJrWpB5SpAuKy8cRE76j69zDxRhnDZ2stVRXsw/K5xOTOhRKT3K9nZqL4KstrQSVtSpWKko6EUcS/ldc1b5NeGdJwFoS6GquKl8hlXh9YdBOHwQklJYNkSGrDLvqX9keh4b/2etzRc1EpI6vpsCZouGkSSD6PglWzErVR7Hf514aWVLM4E0pmTD8bEVXSMgEb7HNWSqbIHyZ3ir0SK3UtvxsDRp3W0LFINJXtCJH+PpKWTVj1yPHRBKjoRbYlmRiggaIZ1N759vKdbCl+/2WyRnpHUVp7/AdUeTxA7JW/iPQM34faxeokj8egJGQtl9GT8+102Nh6iWiYom8BRxYxbj1FNR9MyECaMVzCNkWQimOuRQg2eVNbgkTPjoY9FxLYT2XetZMCiK5kV7q1aQNEpDQTQcz6rRvJi/i4v/4Xmz08rAIOoNkAOocRwglv24cG0Y8ik5oszcnlhDLOiU2PFLm4I="

        - secure: "oeHYqSpZSdaiI5atnV2ZxSb33dGXQA/HguHo8Tt/ee8gYMrtJ4fun84qRuFak6J5iW+wtO0YnJllZivYSEHf+/BgmJG9SfW3hVRdf+gO0ssIw2WvFW1ieMXfJzg+0u40ZHxMsebOfe9rONG9XOposVQhioYvYHXL1C6sPsATpG2vLYSSswUCgThWImZqC7j9zUvHg/qSZ3WKpB03bzpNpRSMsteQfUXCH+lOT8GtY7QVufuuvJpADCSApFuc/PVduUrXSu0bOXjVzpOPlFPfpjeknFPqmcvBvTarcPMw+6n3eHMpx7bO98KzpaMZ21OjLqN4ChE8zsWwe1sAu2Y82jH6QdFzD2xnMtf4cyhpyA0PN0WDJW3ZdVR+6tlv7lL/pxdNfXbrQiFMOF1zrrjtbLWB/JdpZbHpj90dgRVx7/MVRvXyx64Wza8z9nReivXSvReBwONk3zAIKEz59B4pVPBHM6Ta8xKCsDxjFfXRFKs1zAXOoeAM7/PPLs42k7F39LIGgnvr/BPq4XfT+ADYw64hC6IfKUKJ9sl3QfYyB8l/Tqiw8y5pd7Ts6Px7N0XsZ3/UnOqNfGqO69uFG2AZ3c0IQqVfpVMA479XHYcG0+TOh6zBb4/ABhTw19weGYy684jez7YFLI2ziqxMp8Bx/n++jARIgteqLY7P3qmyU6s="

        - secure: "ez8nZcyEWg59s5y6YUYxQgAj35nkwEzi6HdBiWfcTSvwAWp+pA5+ouRESe2frUE2G1mP8TRI+0tc/jJkoavdAvJanuUEqF2Bgd1GVPoLLJQ6LSDR0TTiUidcprKtScmnrYfMh5XX/AiWIw+0DwZyNeyHDernnhIEhePi2GF2od3chXCCN/4gX3MujW8Ej40CF466a118AJM90QJ80SiiizNi/Y5/1ldD2I6tfQxqDA3MK1KcisfY+zj1tBh9Lo3U+ohVwt+lD4or/6DlpPXoC79Q4on7YiINLS8LLz/+/ByGy1j2ujIZkEoJDkdgvXMcBNg10xc266PgC9V3ItuRPTw5tW4zI/f0Ov6fJkGZMhRzZB/SBpD1BXusmMKz8KhfTDq8mgpUsc5pLQlFipdyUFCrzML+bNI46McwAGmRwkiIujj/ymchC5JzhUsSqhJwPzfTSdSoGawIF9juAIdIsR+uRYT05Hg/TuMdxcX3HOuYBHM/qsth2SGrL/QHWbNZH585LHHM9HLe3wcbjDP4j+/LsoU2ivsSF8DOxrbVrr0Ut8Uckce2hc70Ooaid2u5lOpZfSnEyCgvluCATnAmcmU8jzAhwkTtd2yWjZ/RnTCdd977Z9iVkQ2N5LgA4ViLaLYH1htYpTLK8+ew+mnzB6P87JMGkyL38DEVBFmx140="

language: python
sudo: false

cache:
  apt: true
  directories:
    - $HOME/.pip-cache
    - $HOME/gpg_install_prefix
    - $HOME/.cache/pip
    - $HOME/download

python:
  - "2.7"
  - "3.4"
  - "3.5"
  - "3.6"
  - "3.7"
  - "3.8"

before_install:
  - pip install pip -U
  - pip install -r requirements.txt -U

install:
  - travis_retry pip install -e .

script: 
  - travis_wait pytest --xdoctest --cov-config=.coveragerc --cov-report=html --cov=timerit

after_success: 
    - codecov 
    - gpg --version
    - gpg2 --version
    - export GPG_EXECUTABLE=gpg2
    - openssl version
    - | 
        __heredoc__='''
        # Load or generate secrets
        source $(secret_loader.sh)
        echo $TWINE_USERNAME
        echo $TWINE_PASSWORD
        echo $CI_GITHUB_SECRET

        # encrypt relevant travis variables
        travis encrypt TWINE_USERNAME=$TWINE_USERNAME 
        travis encrypt TWINE_PASSWORD=$TWINE_PASSWORD  
        travis encrypt CI_GITHUB_SECRET=$CI_GITHUB_SECRET

        # HOW TO ENCRYPT YOUR SECRET GPG KEY
        IDENTIFIER="travis-ci-Erotemic"
        KEYID=$(gpg --list-keys --keyid-format LONG "$IDENTIFIER" | head -n 2 | tail -n 1 | awk '{print $1}' | tail -c 9)
        echo "KEYID = $KEYID"

        # Export plaintext gpg public keys, private keys, and trust info
        mkdir -p dev
        gpg --armor --export-secret-keys $KEYID > dev/travis_secret_gpg_key.pgp
        gpg --armor --export $KEYID > dev/travis_public_gpg_key.pgp
        gpg --export-ownertrust > dev/gpg_owner_trust

        # Encrypt gpg keys and trust with travis secret
        TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_public_gpg_key.pgp > dev/travis_public_gpg_key.pgp.enc
        TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_secret_gpg_key.pgp > dev/travis_secret_gpg_key.pgp.enc
        TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/gpg_owner_trust > dev/gpg_owner_trust.enc
        echo $KEYID > dev/public_gpg_key

        source $(secret_unloader.sh)

        # Look at what we did, clean up, and add it to git
        ls dev/*.enc
        rm dev/gpg_owner_trust dev/*.pgp
        git status
        git add dev/*.enc
        git add dev/public_gpg_key

        '''  # <hack vim "regex" parser> '
    - |
        # Install a more recent version of GPG
        # https://gnupg.org/download/
        export GPG_INSTALL_PREFIX=$HOME/gpg_install_prefix
        export LD_LIBRARY_PATH=$GPG_INSTALL_PREFIX/lib:$LD_LIBRARY_PATH
        export PATH=$GPG_INSTALL_PREFIX/bin:$PATH
        export CPATH=$GPG_INSTALL_PREFIX/include:$CPATH
        export GPG_EXECUTABLE=$GPG_INSTALL_PREFIX/bin/gpg
        ls $GPG_INSTALL_PREFIX
        ls $GPG_INSTALL_PREFIX/bin || echo "no bin"
        if [[ ! -f "$GPG_INSTALL_PREFIX/bin/gpg" ]]; then
            # try and have travis cache this
            mkdir -p $GPG_INSTALL_PREFIX
            echo $GPG_INSTALL_PREFIX
            OLD=$(pwd)
            cd $GPG_INSTALL_PREFIX
            pip install ubelt

            ERROR_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.36.tar.bz2',
                hash_prefix='6e5f853f77dc04f0091d94b224cab8e669042450f271b78d0ea0219',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            GCRYPT_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.8.5.tar.bz2',
                hash_prefix='b55e16e838d1b1208e7673366971ae7c0f9c1c79e042f41c03d1',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            KSBA_CRYPT_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libksba/libksba-1.3.5.tar.bz2',
                hash_prefix='60179bfd109b7b4fd8d2b30a3216540f03f5a13620d9a5b63f1f95',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            ASSUAN_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libassuan/libassuan-2.5.3.tar.bz2',
                hash_prefix='e7ccb651ea75b07b2e687d48d86d0ab83cba8e2af7f30da2aec',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            NTBLTLS_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/ntbtls/ntbtls-0.1.2.tar.bz2',
                hash_prefix='54468208359dc88155b14cba37773984d7d6f0f37c7a4ce13868d',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            NPTH_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/npth/npth-1.6.tar.bz2',
                hash_prefix='2ed1012e14a9d10665420b9a23628be7e206fd9348111ec751349b',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            GPG_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/gnupg/gnupg-2.2.17.tar.bz2',
                hash_prefix='a3cd094addac62b4b4ec1683005a2bec761ea2aacf6daf904316b',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")

            tar xjf $ERROR_FPATH
            tar xjf $GCRYPT_FPATH
            tar xjf $KSBA_CRYPT_FPATH
            tar xjf $ASSUAN_FPATH
            tar xjf $NTBLTLS_FPATH
            tar xjf $NPTH_FPATH
            tar xjf $GPG_FPATH
            (cd libgpg-error-1.36 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libgcrypt-1.8.5 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libksba-1.3.5 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libassuan-2.5.3 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd ntbtls-0.1.2 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd npth-1.6 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd gnupg-2.2.17 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            echo "GPG_EXECUTABLE = '$GPG_EXECUTABLE'"
            cd $OLD
        fi
    # Decrypt and import GPG Keys / trust
    - $GPG_EXECUTABLE --version
    - openssl version
    - $GPG_EXECUTABLE --list-keys
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - $GPG_EXECUTABLE --list-keys
    - MB_PYTHON_TAG=$(python -c "import setup; print(setup.MB_PYTHON_TAG)")
    - VERSION=$(python -c "import setup; print(setup.VERSION)") 
    - |
        pip install twine
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
          pip install six pyopenssl ndg-httpsclient pyasn1 -U --user
          pip install requests[security] twine --user
        elfi
        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          pip install six twine
          pip install --upgrade pyOpenSSL
        fi
    # Package and publish to pypi (if on release)
    # Package and publish to pypi (if on release)
    - |
        echo "TRAVIS_BRANCH = $TRAVIS_BRANCH"

        KEYID=$(cat dev/public_gpg_key)
        echo "KEYID = '$KEYID'"
        if [[ "$TRAVIS_BRANCH" == "release" ]]; then
            # use set +x to log all intermediate commands 
            export CURRENT_BRANCH=$TRAVIS_BRANCH
            TAG_AND_UPLOAD=yes
        else
            TAG_AND_UPLOAD=no
        fi
        MB_PYTHON_TAG=$MB_PYTHON_TAG \
            USE_GPG=True \
            GPG_KEYID=$KEYID \
            CURRENT_BRANCH=$TRAVIS_BRANCH \
            TWINE_PASSWORD=$TWINE_PASSWORD \
            TWINE_USERNAME=$TWINE_USERNAME \
            GPG_EXECUTABLE=$GPG_EXECUTABLE \
            DEPLOY_BRANCH=release \
            TAG_AND_UPLOAD=$TAG_AND_UPLOAD \
            ./publish.sh
